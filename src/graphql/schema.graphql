"""
Represents all Remult entities.
"""
type Query {
  """
  Get `Task` entity
  """
  task (id: ID!): Task
  """
  List all `Task` entity (with pagination, sorting and filtering)
  """
  tasks (limit: Int, page: Int, orderBy: tasksOrderBy, where: tasksWhere): [Task!]!
  """
  List all `Task` entity (with pagination, sorting and filtering)
  """
  tasksConnection (limit: Int, page: Int, orderBy: tasksOrderBy, where: tasksWhere): TaskConnection
  """
  Get `Category` entity
  """
  category (id: ID!): Category
  """
  List all `Category` entity (with pagination, sorting and filtering)
  """
  categories (limit: Int, page: Int, orderBy: categoriesOrderBy, where: categoriesWhere): [Category!]!
  """
  List all `Category` entity (with pagination, sorting and filtering)
  """
  categoriesConnection (limit: Int, page: Int, orderBy: categoriesOrderBy, where: categoriesWhere): CategoryConnection
}

"""
Represents all Remult Mutations available on Remult.
"""
type Mutation {
  """
  Create a new `Task`
  """
  createTask (input: CreateTaskInput!): CreateTaskPayload
  """
  Update a `Task`
  """
  updateTask (id: ID!, patch: UpdateTaskInput!): UpdateTaskPayload
  """
  Delete a `Task`
  """
  deleteTask (id: ID!): DeleteTaskPayload
  """
  Create a new `Category`
  """
  createCategory (input: CreateCategoryInput!): CreateCategoryPayload
  """
  Update a `Category`
  """
  updateCategory (id: ID!, patch: UpdateCategoryInput!): UpdateCategoryPayload
  """
  Delete a `Category`
  """
  deleteCategory (id: ID!): DeleteCategoryPayload
}

"""
Represents `Task` entity.
"""
type Task implements Node {
  nodeId: ID!
  """
  Id
  """
  id: Int!
  """
  The Title
  """
  title: String!
  """
  Is it completed?
  """
  completed: Boolean!
  """
  Category
  """
  category: Category
}

"""
OrderBy options for `tasks`
"""
input tasksOrderBy {
  id: OrderByDirection
  title: OrderByDirection
  completed: OrderByDirection
  category: OrderByDirection
}

"""
Where options for `tasks`
"""
input tasksWhere {
  id: WhereInt
  title: WhereString
  completed: WhereBoolean
  OR: [tasksWhere!]
}

"""
Represents `TaskConnection` entity.
"""
type TaskConnection {
  totalCount: Int!
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

"""
Represents `TaskEdge` entity.
"""
type TaskEdge {
  node: Task!
  cursor: String!
}

"""
Represents `CreateTaskInput` entity.
"""
input CreateTaskInput {
  title: String
  completed: Boolean
}

"""
Represents `CreateTaskPayload` entity.
"""
type CreateTaskPayload {
  task: Task
}

"""
Represents `UpdateTaskInput` entity.
"""
input UpdateTaskInput {
  title: String
  completed: Boolean
}

"""
Represents `UpdateTaskPayload` entity.
"""
type UpdateTaskPayload {
  task: Task
}

"""
Represents `DeleteTaskPayload` entity.
"""
type DeleteTaskPayload {
  deletedTaskId: ID
}

"""
Represents `Category` entity.
"""
type Category implements Node {
  nodeId: ID!
  """
  Id
  """
  id: String!
  """
  Name
  """
  name: String!
  """
  List all `Task` of `categories`
  """
  tasks (limit: Int, page: Int, orderBy: tasksOrderBy, where: tasksWhere): [Task!]!
}

"""
OrderBy options for `categories`
"""
input categoriesOrderBy {
  id: OrderByDirection
  name: OrderByDirection
}

"""
Where options for `categories`
"""
input categoriesWhere {
  id: WhereString
  name: WhereString
  OR: [categoriesWhere!]
}

"""
Represents `CategoryConnection` entity.
"""
type CategoryConnection {
  totalCount: Int!
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

"""
Represents `CategoryEdge` entity.
"""
type CategoryEdge {
  node: Category!
  cursor: String!
}

"""
Represents `CreateCategoryInput` entity.
"""
input CreateCategoryInput {
  id: String
  name: String
}

"""
Represents `CreateCategoryPayload` entity.
"""
type CreateCategoryPayload {
  category: Category
}

"""
Represents `UpdateCategoryInput` entity.
"""
input UpdateCategoryInput {
  id: String
  name: String
}

"""
Represents `UpdateCategoryPayload` entity.
"""
type UpdateCategoryPayload {
  category: Category
}

"""
Represents `DeleteCategoryPayload` entity.
"""
type DeleteCategoryPayload {
  deletedCategoryId: ID
}

"""
Represents `WhereString` entity.
"""
input WhereString {
  eq: String
  ne: String
  in: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  st: String
}

"""
Represents `WhereStringNullable` entity.
"""
input WhereStringNullable {
  eq: String
  ne: String
  in: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  st: String
  null: Boolean
}

"""
Represents `WhereInt` entity.
"""
input WhereInt {
  eq: Int
  ne: Int
  in: [Int!]
  gt: Int
  gte: Int
  lt: Int
  lte: Int
}

"""
Represents `WhereIntNullable` entity.
"""
input WhereIntNullable {
  eq: Int
  ne: Int
  in: [Int!]
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
}

"""
Represents `WhereFloat` entity.
"""
input WhereFloat {
  eq: Float
  ne: Float
  in: [Float!]
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

"""
Represents `WhereFloatNullable` entity.
"""
input WhereFloatNullable {
  eq: Float
  ne: Float
  in: [Float!]
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
}

"""
Represents `WhereBoolean` entity.
"""
input WhereBoolean {
  eq: Boolean
  ne: Boolean
  in: [Boolean!]
}

"""
Represents `WhereBooleanNullable` entity.
"""
input WhereBooleanNullable {
  eq: Boolean
  ne: Boolean
  in: [Boolean!]
  null: Boolean
}

"""
Represents `WhereID` entity.
"""
input WhereID {
  eq: ID
  ne: ID
  in: [ID!]
}

"""
Represents `WhereIDNullable` entity.
"""
input WhereIDNullable {
  eq: ID
  ne: ID
  in: [ID!]
  null: Boolean
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String!
}

"""
Determines the order of items returned
"""
enum OrderByDirection {
  """
  Sort data in ascending order
  """
  ASC
  """
  Sort data in descending order
  """
  DESC
}

"""
Node interface of remult entities (eg: nodeId: `Task:1` so `Typename:id`)
"""
interface Node {
  nodeId: ID!
}
