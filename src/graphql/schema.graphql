"""
Represents all Remult entities.
"""
type Query {
  """
  Get `Task` entity
  """
  task(id: ID!): Task
  """
  List all `Task` entity (with pagination, sorting and filtering)
  """
  tasks(
    """
    
For **page by page** pagination.
Limit the number of result. 
_Side note: `Math.ceil(totalCount / limit)` to determine how many pages there are._
    """
    limit: Int
  , 
    """
    
For **page by page** pagination.
Select a dedicated page.
    """
    page: Int
  , 
    """
    Remult sorting options
    """
    orderBy: tasksOrderBy
  , 
    """
    Remult filtering options
    """
    where: tasksWhere
  ): TaskConnection
  """
  Get `Category` entity
  """
  category(id: ID!): Category
  """
  List all `Category` entity (with pagination, sorting and filtering)
  """
  categories(
    """
    
For **page by page** pagination.
Limit the number of result. 
_Side note: `Math.ceil(totalCount / limit)` to determine how many pages there are._
    """
    limit: Int
  , 
    """
    
For **page by page** pagination.
Select a dedicated page.
    """
    page: Int
  , 
    """
    Remult sorting options
    """
    orderBy: categoriesOrderBy
  , 
    """
    Remult filtering options
    """
    where: categoriesWhere
  ): CategoryConnection
  """
  Get `Tag` entity
  """
  tag(id: ID!): Tag
  """
  List all `Tag` entity (with pagination, sorting and filtering)
  """
  tags(
    """
    
For **page by page** pagination.
Limit the number of result. 
_Side note: `Math.ceil(totalCount / limit)` to determine how many pages there are._
    """
    limit: Int
  , 
    """
    
For **page by page** pagination.
Select a dedicated page.
    """
    page: Int
  , 
    """
    Remult sorting options
    """
    orderBy: tagsOrderBy
  , 
    """
    Remult filtering options
    """
    where: tagsWhere
  ): TagConnection
  """
  Grab any Remult entity given it's globally unique `ID`
  """
  node(
    """
    The globally unique `ID` _(_typename:id)_
    """
    nodeId: ID!
  ): Node
}

"""
The type for `Mutation`
"""
type Mutation {
  """
  Create a new `Task`
  """
  createTask(input: CreateTaskInput!, clientMutationId: String): CreateTaskPayload
  """
  Update a `Task`
  """
  updateTask(id: ID!, patch: UpdateTaskInput!, clientMutationId: String): UpdateTaskPayload
  """
  Delete a `Task`
  """
  deleteTask(id: ID!, clientMutationId: String): DeleteTaskPayload
  """
  Create a new `Category`
  """
  createCategory(input: CreateCategoryInput!, clientMutationId: String): CreateCategoryPayload
  """
  Update a `Category`
  """
  updateCategory(id: ID!, patch: UpdateCategoryInput!, clientMutationId: String): UpdateCategoryPayload
  """
  Delete a `Category`
  """
  deleteCategory(id: ID!, clientMutationId: String): DeleteCategoryPayload
  """
  Create a new `Tag`
  """
  createTag(input: CreateTagInput!, clientMutationId: String): CreateTagPayload
  """
  Update a `Tag`
  """
  updateTag(id: ID!, patch: UpdateTagInput!, clientMutationId: String): UpdateTagPayload
  """
  Delete a `Tag`
  """
  deleteTag(id: ID!, clientMutationId: String): DeleteTagPayload
}

"""
The type_impl_node for `Task`
"""
type Task implements Node {
  """
  Id
  """
  id: Int!
  """
  The Title
  """
  title: String!
  """
  Is it completed?
  """
  completed: Boolean!
  """
  The Priority
  """
  thePriority: String!
  """
  Category
  """
  category: Category
  """
  User On Server
  """
  userOnServer: String!
  """
  The globally unique `ID` _(_typename:id)_
  """
  nodeId: ID!
}

"""
OrderBy options for `tasks`
"""
input tasksOrderBy {
  id: OrderByDirection
  title: OrderByDirection
  completed: OrderByDirection
  thePriority: OrderByDirection
  category: OrderByDirection
}

"""
Where options for `tasks`
"""
input tasksWhere {
  id: WhereInt
  title: WhereString
  completed: WhereBoolean
  thePriority: WhereString
  OR: [tasksWhere!]
}

"""
The type for `TaskConnection`
"""
type TaskConnection {
    totalCount: Int!
    items: [Task!]!
}

"""
The input for `CreateTaskInput`
"""
input CreateTaskInput {
    title: String
    completed: Boolean
    thePriority: String
    category: ID
    userOnServer: String
}

"""
The type for `CreateTaskPayload`
"""
type CreateTaskPayload {
    task: Task
    clientMutationId: String
}

"""
The input for `UpdateTaskInput`
"""
input UpdateTaskInput {
    title: String
    completed: Boolean
    thePriority: String
    category: ID
    userOnServer: String
}

"""
The type for `UpdateTaskPayload`
"""
type UpdateTaskPayload {
    task: Task
    clientMutationId: String
}

"""
The type for `DeleteTaskPayload`
"""
type DeleteTaskPayload {
    id: ID
    clientMutationId: String
}

"""
The type_impl_node for `Category`
"""
type Category implements Node {
  """
  Id
  """
  id: String!
  """
  Name
  """
  name: String!
  """
  List all `Task` of `categories`
  """
  tasks(
    """
    
For **page by page** pagination.
Limit the number of result. 
_Side note: `Math.ceil(totalCount / limit)` to determine how many pages there are._
    """
    limit: Int
  , 
    """
    
For **page by page** pagination.
Select a dedicated page.
    """
    page: Int
  , 
    """
    Remult sorting options
    """
    orderBy: tasksOrderBy
  , 
    """
    Remult filtering options
    """
    where: tasksWhere
  ): TaskConnection
  """
  The globally unique `ID` _(_typename:id)_
  """
  nodeId: ID!
}

"""
OrderBy options for `categories`
"""
input categoriesOrderBy {
  id: OrderByDirection
  name: OrderByDirection
}

"""
Where options for `categories`
"""
input categoriesWhere {
  id: WhereString
  name: WhereString
  OR: [categoriesWhere!]
}

"""
The type for `CategoryConnection`
"""
type CategoryConnection {
    totalCount: Int!
    items: [Category!]!
}

"""
The input for `CreateCategoryInput`
"""
input CreateCategoryInput {
    name: String
}

"""
The type for `CreateCategoryPayload`
"""
type CreateCategoryPayload {
    category: Category
    clientMutationId: String
}

"""
The input for `UpdateCategoryInput`
"""
input UpdateCategoryInput {
    name: String
}

"""
The type for `UpdateCategoryPayload`
"""
type UpdateCategoryPayload {
    category: Category
    clientMutationId: String
}

"""
The type for `DeleteCategoryPayload`
"""
type DeleteCategoryPayload {
    id: ID
    clientMutationId: String
}

"""
The type_impl_node for `Tag`
"""
type Tag implements Node {
  """
  Id
  """
  id: String!
  """
  Value
  """
  value: String!
  """
  The globally unique `ID` _(_typename:id)_
  """
  nodeId: ID!
}

"""
OrderBy options for `tags`
"""
input tagsOrderBy {
  id: OrderByDirection
  value: OrderByDirection
}

"""
Where options for `tags`
"""
input tagsWhere {
  id: WhereString
  value: WhereString
  OR: [tagsWhere!]
}

"""
The type for `TagConnection`
"""
type TagConnection {
    totalCount: Int!
    items: [Tag!]!
}

"""
The input for `CreateTagInput`
"""
input CreateTagInput {
    value: String
}

"""
The type for `CreateTagPayload`
"""
type CreateTagPayload {
    tag: Tag
    clientMutationId: String
}

"""
The input for `UpdateTagInput`
"""
input UpdateTagInput {
    value: String
}

"""
The type for `UpdateTagPayload`
"""
type UpdateTagPayload {
    tag: Tag
    clientMutationId: String
}

"""
The type for `DeleteTagPayload`
"""
type DeleteTagPayload {
    id: ID
    clientMutationId: String
}

"""
The input for `WhereString`
"""
input WhereString {
    eq: String
    ne: String
    in: [String!]
    nin: [String!]
    gt: String
    gte: String
    lt: String
    lte: String
    st: String
}

"""
The input for `WhereStringNullable`
"""
input WhereStringNullable {
    eq: String
    ne: String
    in: [String!]
    nin: [String!]
    gt: String
    gte: String
    lt: String
    lte: String
    st: String
    null: Boolean
}

"""
The input for `WhereInt`
"""
input WhereInt {
    eq: Int
    ne: Int
    in: [Int!]
    nin: [Int!]
    gt: Int
    gte: Int
    lt: Int
    lte: Int
}

"""
The input for `WhereIntNullable`
"""
input WhereIntNullable {
    eq: Int
    ne: Int
    in: [Int!]
    nin: [Int!]
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    null: Boolean
}

"""
The input for `WhereFloat`
"""
input WhereFloat {
    eq: Float
    ne: Float
    in: [Float!]
    nin: [Float!]
    gt: Float
    gte: Float
    lt: Float
    lte: Float
}

"""
The input for `WhereFloatNullable`
"""
input WhereFloatNullable {
    eq: Float
    ne: Float
    in: [Float!]
    nin: [Float!]
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    null: Boolean
}

"""
The input for `WhereBoolean`
"""
input WhereBoolean {
    eq: Boolean
    ne: Boolean
    in: [Boolean!]
    nin: [Boolean!]
}

"""
The input for `WhereBooleanNullable`
"""
input WhereBooleanNullable {
    eq: Boolean
    ne: Boolean
    in: [Boolean!]
    nin: [Boolean!]
    null: Boolean
}

"""
The input for `WhereID`
"""
input WhereID {
    eq: ID
    ne: ID
    in: [ID!]
    nin: [ID!]
}

"""
The input for `WhereIDNullable`
"""
input WhereIDNullable {
    eq: ID
    ne: ID
    in: [ID!]
    nin: [ID!]
    null: Boolean
}

"""
Determines the order of returned elements
"""
enum OrderByDirection {
  """
  Sort data in ascending order
  """
  ASC
  """
  Sort data in descending order
  """
  DESC
}

"""
Node interface of remult entities (eg: nodeId: `Task:1` so `__typename:id`)
"""
interface Node {
  """
  The globally unique `ID` _(_typename:id)_
  """
  nodeId: ID!
}
